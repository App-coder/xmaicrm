<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.crm.settings.basic.mapper.XmRoleMapper" >
  <resultMap id="BaseResultMap" type="com.crm.model.XmRole" >
    <id column="roleid" property="roleid" jdbcType="VARCHAR" />
    <result column="rolename" property="rolename" jdbcType="VARCHAR" />
    <result column="parentrole" property="parentrole" jdbcType="VARCHAR" />
    <result column="depth" property="depth" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    roleid, rolename, parentrole, depth
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from xm_role
    where roleid = #{roleid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from xm_role
    where roleid = #{roleid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.crm.model.XmRole" >
    insert into xm_role (roleid, rolename, parentrole, 
      depth)
    values (#{roleid,jdbcType=VARCHAR}, #{rolename,jdbcType=VARCHAR}, #{parentrole,jdbcType=VARCHAR}, 
      #{depth,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.crm.model.XmRole" >
    insert into xm_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleid != null" >
        roleid,
      </if>
      <if test="rolename != null" >
        rolename,
      </if>
      <if test="parentrole != null" >
        parentrole,
      </if>
      <if test="depth != null" >
        depth,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleid != null" >
        #{roleid,jdbcType=VARCHAR},
      </if>
      <if test="rolename != null" >
        #{rolename,jdbcType=VARCHAR},
      </if>
      <if test="parentrole != null" >
        #{parentrole,jdbcType=VARCHAR},
      </if>
      <if test="depth != null" >
        #{depth,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.crm.model.XmRole" >
    update xm_role
    <set >
      <if test="rolename != null" >
        rolename = #{rolename,jdbcType=VARCHAR},
      </if>
      <if test="parentrole != null" >
        parentrole = #{parentrole,jdbcType=VARCHAR},
      </if>
      <if test="depth != null" >
        depth = #{depth,jdbcType=INTEGER},
      </if>
    </set>
    where roleid = #{roleid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.crm.model.XmRole" >
    update xm_role
    set rolename = #{rolename,jdbcType=VARCHAR},
      parentrole = #{parentrole,jdbcType=VARCHAR},
      depth = #{depth,jdbcType=INTEGER}
    where roleid = #{roleid,jdbcType=VARCHAR}
  </update>
  <select id="loadAll" resultMap="BaseResultMap" >
  	select 
    <include refid="Base_Column_List" />
    from xm_role where depth!=0 order by roleid;
  </select>
  <select id="getRolesByParent" resultType="map" >
	SELECT
		roles.*,
	IF(
		(
			SELECT
				count(xm_role.roleid)
			FROM
				xm_role
			WHERE
				parentrole LIKE CONCAT(roles.parentrole,'::%')
		and xm_role.depth = roles.depth+1
		)> 0,
		'closed',
		'open'
	)state
	FROM
		xm_role roles
	WHERE
	<choose>
		<when test="depth==0">
			parentrole like '${parentrole}%' and depth=${depth};
		</when>
		<otherwise>
			parentrole like '${parentrole}::%' and depth=${depth};
		</otherwise>
	</choose>
  </select>
  <select id="getAll" resultMap="BaseResultMap" >
  	select * from xm_role
  </select>
</mapper>